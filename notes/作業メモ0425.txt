
ネットワークリポジトリを解除
ドキュメント
function (){
serviceAgent.switchRepository(0);//ローカルレポジトリセット
serviceAgent.switchService();
serviceAgent.init();
documentDepot.products=[];
documentDepot.documents =[];
documentDepot.documentsUpdate();
}


ネットワーク・サーバ

organization（team）
    
title
episode
cut

関連メソッド		
documentDepot.
	documentsUpdate
ドキュメントブラウザの保持データをリポジトリのデータから更新
二つのセレクタを更新する
	updateOpusSelector
プロダクトセレクタを更新
	updateDocumentSelector
ドキュメントセレクタを更新
	getEntriesByOpusid
OpusIdfからエントリ群を返す
ブラウザ表示用
	rebuildList
ドキュメントブラウザの一時データをクリアしてserviceAgent.currentRepository.getListをコールする
getListにコールバックを与えておく？
		
		
networkRepository.

	getProducts
プロダクト（タイトル）情報取得
取得成功時
コールバック引数がない場合はproductsUpdateをコール

	productsUpdate
引数で指定されたプロダクト（タイトル）詳細情報を取得
引数がない場合は、すべてのプロダクトを更新
各取得成功時
コールバック引数がない場合はgetEpisodesをコール

	getEpisodes
プロダクト毎にエピソード一覧を取得
プロダクト指定がない場合はエラー
取得成功時
コールバック引数がない場合は各エピソード毎にエピソード詳細を取得してカットリストを得る

	episodesUpdate
各エピソード毎にエピソード詳細を取得
引数のエピソードが存在しない場合はエラー
取得成功時
コールバック引数がない場合はgetSCiをコール
分割処理を予定

	getSCi
カット詳細を取得
分割処理可能
エントリリストの逐次更新を行う。

ここでコールバック引数がない場合はブラウザの逐次更新を行うか？
処理的には、その目的の場合特に更新手続をコールバック引数で与えるほうが良い

ドキュメントブラウザの更新目的の呼び出しの場合、コールバック関数でその時点のドキュメントブラウザドキュメントリスト更新を明示的に組み込む
それ以外はカット詳細を取得してproductsDataの更新を行うが、entryListのアップデートを行わない…で良い？

エントリリストの更新を行った場合は、更新フラグを立て直接にはブラウザの更新を行わない。


	getList
リポジトリのエントリリストをクリアして更新を行う
entryListは　Network/Local の共通構造だが、　NetworkRepository の場合　productsData としての中間構造があるのでその差をよく考えること

productsData は実際のサーバのデータをキャッシュしておくオブジェクトとして捉えると、EntryListの逐次更新を伴うほうが齟齬が少ないので望ましい。

getListをドキュメントステータス終了後の情報更新に使用すると操作遅延が激しいのでこれは行わない。
リスト取得は以下のケースで個々に解決される
	1.明示的に全リスト更新を行った時
	2.特定ののカット（範囲）に対して請求と解決を行う　OPUSは固定
	3.特定のOPUSの内のリスト更新を行う
	4.特定のリポジトリのリスト更新を行う(これは1.と等価)

リポジトリに対する請求は基本的にリポジトリがインテリジェンスでは無いので個別の識別キーしか受け付けない
カット識別子での請求や識別子内部データの範囲指定などの操作はアプリケーション側での操作となる
このDBを内部に置くものが　entryList(= ListEntryコレクション) となる。

最終的には、entryList はバックグラウンドで常にサービスとの同期をとる必要がある…今のうちに組むか
entryListが無いと実際のデータとの対比ができなくなるので、それが良い

entryListの機能
モデファイされたエントリに印を付けて、バックグラウンドで更新を試みる
非同期とともに同期更新も必要
同期更新の際は、極力転送量を下げるため単独エントリを主体に更新を行う

タスクコントローラを置く
xUI.initで起動　